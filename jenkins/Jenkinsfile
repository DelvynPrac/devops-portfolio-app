pipeline {
  agent { label 'linux && docker' }

  environment {
    IMAGE = "docker.io/${DOCKERHUB_USER}/flask-portfolio"
  }

  options { timestamps() }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Unit Tests') {
      steps {
        sh '''
          python3 -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pytest -q
        '''
      }
    }

    stage('Build Image') {
      steps {
        sh 'docker build -f docker/Dockerfile -t ${IMAGE}:${GIT_COMMIT} .'
      }
    }

    stage('Login & Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
          sh '''
            echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin
            docker push ${IMAGE}:${GIT_COMMIT}
          '''
          script {
            // Detect branch for single-branch pipeline jobs
            def branch = sh(returnStdout: true, script: "git rev-parse --abbrev-ref HEAD").trim()
            echo "Detected branch: ${branch}"
            if (branch == 'main' || branch == 'origin/main') {
              sh """
                docker tag ${IMAGE}:${GIT_COMMIT} ${IMAGE}:prod
                docker push ${IMAGE}:prod
              """
            } else if (branch == 'develop' || branch == 'origin/develop') {
              sh """
                docker tag ${IMAGE}:${GIT_COMMIT} ${IMAGE}:dev
                docker push ${IMAGE}:dev
              """
            }
          }
        }
      }
    }
  }

  post {
    always {
      sh 'docker image ls | head -n 10 || true'
    }
    cleanup {
      sh 'docker image prune -f || true'
    }
  }
}